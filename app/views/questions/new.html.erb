<%#= form_for @question do |f| %>

  <%# form_for is a Rails built-in form helper wihcih generates a form that integrates
  nicely with a matching controller (in this case questions_controller).
  Case 1: if @question is not persisted (not yet saved to the database), then
  form_for will make the form send a 'POST' request to 'questions_path'
  which should be defined to submit to questions controller / create action


  Also, if y ou have any attributes pre-set on any of the @question fields (such as title or body),
  it will be pre-populate those fields. One more thing, it will also add a special class if there happens to be errors on a specific field %>

  <%# if @question.errors.any? %>
    <!-- <ul> -->
      <%# @question.errors.full_messages.each do |msg| %>
      <!-- <li> -->
        <%#= msg %>
      <!-- </li> -->
      <%# end %>
    <!-- </ul> -->
  <%# end %>


  <%#= @question.errors.full_messages.join(", ") %>

  <!-- <div> -->
    <%# Here we are saying do |f| and then sending, after submit, to @question, Question.new({title: "text", body: "body here"}) %>
    <%#= f.label :title %>
    <%#= f.text_field :title %>
  <!-- </div> -->
  <!-- <div> -->
    <%#= f.label :body %>
    <%#= f.text_area :body %>
  <!-- </div> -->
  <%#= f.submit %>



<%# end %>

<%# Below will look for a partial names '_form.html.erb' within the same folder
 as this file. If you want to render the partial from another folder you can use the full
 path (within the views folder) such as: <%= redner "/questions/form" %>

 <%# Partials have access to the instance variables available in the template. So, in this case
    @question will be available in _form.html.erb %>

    <%# If you want to pass a local variable to the partial then you can do: = render "form", abc: "Hello" Then you will have a variable named 'abc' available in '_form' with value "hello" %>

<%= render "form" %>
